今天学习的东西
1.应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架（SLF4J、JCL--Jakarta Commons Logging）中的API。什么是日志框架和日志系统，请参考webx作者宝宝的文章，文章里也详细说明了为什么不能直接依赖使用日志系统而是日志框架，以及应用的pom中如何做dependencyManagement。
说明：日志框架（SLF4J、JCL--Jakarta Commons Logging）的使用方式（推荐使用SLF4J）：
使用SLF4J：

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
private static final Logger logger = LoggerFactory.getLogger(Abc.class);
使用JCL：

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
private static final Log log = LogFactory.getLog(Abc.class);


 日志框架：提供日志调用的接口，实际的日志输出委托给日志系统实现。

    JCL(Jakarta Commons Logging)：比较流行的日志框架，很多框架都依赖JCL，例如Spring等。
    SLF4j：提供新的API，初衷是配合Logback使用，但同时兼容Log4j。

日志系统：负责输出日志
    Log4j：经典的一种日志解决方案。内部把日志系统抽象封装成Logger 、appender 、pattern 等实现。我们可以通过配置文件轻松的实现日志系统的管理和多样化配置。
    Log4j2：Log4j的2.0版本，对Log4j进行了优化，比如支持参数API、支持异步appender、插件式架构等
    Logback：Log4j的替代产品，需要配合日志框架SLF4j使用
    JUL(java.util.logging)：JDK提供的日志系统，较混乱，不常用
日志框架进行抽象，抽象出一个接口层，对每个日志实现都适配或者转接，这样这些提供给别人的库都直接使用抽象层即可。
JCL的实现原理，使用JCL一般(如果是log4j可以不需要)需要一个配置commons-logging.properties在classpath上
slf4j的设计确实比较优雅，采用比较熟悉的方式——接口和实现分离，有个纯粹的接口层——slf4j-api工程，这个里边基本完全定义了日志的接口，所以对于开发来说，只需要使用这个即可。
http://blog.csdn.net/zhuyucheng123/article/details/38168291
2.【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么往上抛。
正例：logger.error(各类参数或者对象toString + "_" + e.getMessage(), e);
logerror 
  输出的POJO类必须重写toString方法，否则只输出此对象的hashCode值（地址值），没啥参考意义。
明天要学习的并解决的事情:
1.强制】不允许直接拿HashMap与HashTable作为查询结果集的输出。
反例：某同学为避免写一个<resultMap>，直接使用HashTable来接收数据库返回结果，结果出现日常是把bigint转成Long值，而线上由于数据库版本不一样，解析成BigInteger，导致线上问题。


